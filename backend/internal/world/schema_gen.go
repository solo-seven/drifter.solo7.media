// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package world

import "encoding/json"
import "fmt"
import "time"

type EnvironmentSchemaJson struct {
	// Agents corresponds to the JSON schema field "agents".
	Agents []EnvironmentSchemaJsonAgentsElem `json:"agents" yaml:"agents" mapstructure:"agents"`

	// Map corresponds to the JSON schema field "map".
	Map EnvironmentSchemaJsonMap `json:"map" yaml:"map" mapstructure:"map"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata *EnvironmentSchemaJsonMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Objects corresponds to the JSON schema field "objects".
	Objects []EnvironmentSchemaJsonObjectsElem `json:"objects" yaml:"objects" mapstructure:"objects"`
}

type EnvironmentSchemaJsonAgentsElem struct {
	// Reference to a behavior script or preset
	Behavior string `json:"behavior" yaml:"behavior" mapstructure:"behavior"`

	// Direction agent is facing in radians
	Facing *float64 `json:"facing,omitempty" yaml:"facing,omitempty" mapstructure:"facing,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Model corresponds to the JSON schema field "model".
	Model string `json:"model" yaml:"model" mapstructure:"model"`

	// Position corresponds to the JSON schema field "position".
	Position EnvironmentSchemaJsonAgentsElemPosition `json:"position" yaml:"position" mapstructure:"position"`

	// Optional initial state data
	State map[string]interface{} `json:"state,omitempty" yaml:"state,omitempty" mapstructure:"state,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type EnvironmentSchemaJsonAgentsElemPosition struct {
	// X corresponds to the JSON schema field "x".
	X float64 `json:"x" yaml:"x" mapstructure:"x"`

	// Y corresponds to the JSON schema field "y".
	Y float64 `json:"y" yaml:"y" mapstructure:"y"`

	// Z corresponds to the JSON schema field "z".
	Z float64 `json:"z,omitempty" yaml:"z,omitempty" mapstructure:"z,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonAgentsElemPosition) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["x"]; raw != nil && !ok {
		return fmt.Errorf("field x in EnvironmentSchemaJsonAgentsElemPosition: required")
	}
	if _, ok := raw["y"]; raw != nil && !ok {
		return fmt.Errorf("field y in EnvironmentSchemaJsonAgentsElemPosition: required")
	}
	type Plain EnvironmentSchemaJsonAgentsElemPosition
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["z"]; !ok || v == nil {
		plain.Z = 0.0
	}
	*j = EnvironmentSchemaJsonAgentsElemPosition(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonAgentsElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["behavior"]; raw != nil && !ok {
		return fmt.Errorf("field behavior in EnvironmentSchemaJsonAgentsElem: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in EnvironmentSchemaJsonAgentsElem: required")
	}
	if _, ok := raw["model"]; raw != nil && !ok {
		return fmt.Errorf("field model in EnvironmentSchemaJsonAgentsElem: required")
	}
	if _, ok := raw["position"]; raw != nil && !ok {
		return fmt.Errorf("field position in EnvironmentSchemaJsonAgentsElem: required")
	}
	type Plain EnvironmentSchemaJsonAgentsElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = EnvironmentSchemaJsonAgentsElem(plain)
	return nil
}

type EnvironmentSchemaJsonMap struct {
	// Height corresponds to the JSON schema field "height".
	Height int `json:"height" yaml:"height" mapstructure:"height"`

	// TileSize corresponds to the JSON schema field "tileSize".
	TileSize float64 `json:"tileSize,omitempty" yaml:"tileSize,omitempty" mapstructure:"tileSize,omitempty"`

	// Tiles corresponds to the JSON schema field "tiles".
	Tiles []EnvironmentSchemaJsonMapTilesElem `json:"tiles" yaml:"tiles" mapstructure:"tiles"`

	// Width corresponds to the JSON schema field "width".
	Width int `json:"width" yaml:"width" mapstructure:"width"`
}

type EnvironmentSchemaJsonMapTilesElem struct {
	// Height corresponds to the JSON schema field "height".
	Height *float64 `json:"height,omitempty" yaml:"height,omitempty" mapstructure:"height,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// X corresponds to the JSON schema field "x".
	X int `json:"x" yaml:"x" mapstructure:"x"`

	// Y corresponds to the JSON schema field "y".
	Y int `json:"y" yaml:"y" mapstructure:"y"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonMapTilesElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in EnvironmentSchemaJsonMapTilesElem: required")
	}
	if _, ok := raw["x"]; raw != nil && !ok {
		return fmt.Errorf("field x in EnvironmentSchemaJsonMapTilesElem: required")
	}
	if _, ok := raw["y"]; raw != nil && !ok {
		return fmt.Errorf("field y in EnvironmentSchemaJsonMapTilesElem: required")
	}
	type Plain EnvironmentSchemaJsonMapTilesElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = EnvironmentSchemaJsonMapTilesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonMap) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["height"]; raw != nil && !ok {
		return fmt.Errorf("field height in EnvironmentSchemaJsonMap: required")
	}
	if _, ok := raw["tiles"]; raw != nil && !ok {
		return fmt.Errorf("field tiles in EnvironmentSchemaJsonMap: required")
	}
	if _, ok := raw["width"]; raw != nil && !ok {
		return fmt.Errorf("field width in EnvironmentSchemaJsonMap: required")
	}
	type Plain EnvironmentSchemaJsonMap
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if 1 > plain.Height {
		return fmt.Errorf("field %s: must be >= %v", "height", 1)
	}
	if v, ok := raw["tileSize"]; !ok || v == nil {
		plain.TileSize = 1.0
	}
	if 0.1 > plain.TileSize {
		return fmt.Errorf("field %s: must be >= %v", "tileSize", 0.1)
	}
	if 1 > plain.Width {
		return fmt.Errorf("field %s: must be >= %v", "width", 1)
	}
	*j = EnvironmentSchemaJsonMap(plain)
	return nil
}

type EnvironmentSchemaJsonMetadata struct {
	// Author corresponds to the JSON schema field "author".
	Author *string `json:"author,omitempty" yaml:"author,omitempty" mapstructure:"author,omitempty"`

	// Created corresponds to the JSON schema field "created".
	Created *time.Time `json:"created,omitempty" yaml:"created,omitempty" mapstructure:"created,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonMetadata) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain EnvironmentSchemaJsonMetadata
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["version"]; !ok || v == nil {
		plain.Version = "0.1.0"
	}
	*j = EnvironmentSchemaJsonMetadata(plain)
	return nil
}

type EnvironmentSchemaJsonObjectsElem struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Model corresponds to the JSON schema field "model".
	Model string `json:"model" yaml:"model" mapstructure:"model"`

	// Position corresponds to the JSON schema field "position".
	Position EnvironmentSchemaJsonObjectsElemPosition `json:"position" yaml:"position" mapstructure:"position"`

	// Properties corresponds to the JSON schema field "properties".
	Properties map[string]interface{} `json:"properties,omitempty" yaml:"properties,omitempty" mapstructure:"properties,omitempty"`

	// Rotation corresponds to the JSON schema field "rotation".
	Rotation float64 `json:"rotation,omitempty" yaml:"rotation,omitempty" mapstructure:"rotation,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

type EnvironmentSchemaJsonObjectsElemPosition struct {
	// X corresponds to the JSON schema field "x".
	X float64 `json:"x" yaml:"x" mapstructure:"x"`

	// Y corresponds to the JSON schema field "y".
	Y float64 `json:"y" yaml:"y" mapstructure:"y"`

	// Z corresponds to the JSON schema field "z".
	Z float64 `json:"z,omitempty" yaml:"z,omitempty" mapstructure:"z,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonObjectsElemPosition) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["x"]; raw != nil && !ok {
		return fmt.Errorf("field x in EnvironmentSchemaJsonObjectsElemPosition: required")
	}
	if _, ok := raw["y"]; raw != nil && !ok {
		return fmt.Errorf("field y in EnvironmentSchemaJsonObjectsElemPosition: required")
	}
	type Plain EnvironmentSchemaJsonObjectsElemPosition
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["z"]; !ok || v == nil {
		plain.Z = 0.0
	}
	*j = EnvironmentSchemaJsonObjectsElemPosition(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJsonObjectsElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in EnvironmentSchemaJsonObjectsElem: required")
	}
	if _, ok := raw["model"]; raw != nil && !ok {
		return fmt.Errorf("field model in EnvironmentSchemaJsonObjectsElem: required")
	}
	if _, ok := raw["position"]; raw != nil && !ok {
		return fmt.Errorf("field position in EnvironmentSchemaJsonObjectsElem: required")
	}
	type Plain EnvironmentSchemaJsonObjectsElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["rotation"]; !ok || v == nil {
		plain.Rotation = 0.0
	}
	*j = EnvironmentSchemaJsonObjectsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvironmentSchemaJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["agents"]; raw != nil && !ok {
		return fmt.Errorf("field agents in EnvironmentSchemaJson: required")
	}
	if _, ok := raw["map"]; raw != nil && !ok {
		return fmt.Errorf("field map in EnvironmentSchemaJson: required")
	}
	if _, ok := raw["objects"]; raw != nil && !ok {
		return fmt.Errorf("field objects in EnvironmentSchemaJson: required")
	}
	type Plain EnvironmentSchemaJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = EnvironmentSchemaJson(plain)
	return nil
}
